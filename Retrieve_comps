# 1. Imports
import requests
from google.colab import userdata, drive, files
from datetime import datetime
import pytz
import json
import os
from typing import List, Union
import asyncio
import aiohttp
import pandas as pd

# 2. Data Import Function
def import_data(file_path: str) -> List[Union[int, str]]:
    """Import a list of property IDs or street addresses from a file."""
    # 2.1 Initial file reading
    with open(file_path, 'r') as f:
        content = f.read().strip().split('\n')
    
    # 2.2 File selection process
    files_in_colab = os.listdir()
    
    print("Available files in Colab environment:")
    for i, file in enumerate(files_in_colab, 1):
        print(f"{i}. {file}")
    print(f"{len(files_in_colab) + 1}. Upload your file")
    
    choice = int(input("Enter the number of the file you want to use (or upload option): "))
    
    # 2.3 File reading based on selection
    if choice <= len(files_in_colab):
        selected_file = files_in_colab[choice - 1]
        with open(selected_file, 'r') as f:
            content = f.read().strip().split('\n')
    else:
        uploaded = files.upload()
        selected_file = list(uploaded.keys())[0]
        with open(selected_file, 'r') as f:
            content = f.read().strip().split('\n')
    
    # 2.4 Content type determination and return
    if all(line.isdigit() for line in content):
        return [int(line) for line in content]
    else:
        return content

# 3. Comps Retrieval Function
# 3.1 Single Comp Retrieval Function
async def get_comp(session, prop, headers, url):
    """Asynchronously retrieve comp for a single property."""
    if isinstance(prop, int):
        payload = {"id": prop}
    else:
        payload = {"address": prop}
    
    async with session.post(url, json=payload, headers=headers) as response:
        return await response.json()
    
# 3.2 Multiple Comps Retrieval Function
async def get_comps(properties: List[Union[int, str]]):
    """Retrieve comps for a list of properties and save the results."""
    # API setup
    url = "https://api.realestateapi.com/v2/PropertyComps"
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "x-api-key": userdata.get('api_key')
    }

   # 3.3 Time setup
    est = pytz.timezone('US/Eastern')
    current_time = datetime.now(est)
    formatted_time = current_time.strftime("%m%d%y_%H%M%S")

    # 3.4 Google Drive mounting
    drive.mount('/content/drive')

    # 3.5 Asynchronous API calls
    async with aiohttp.ClientSession() as session:
        tasks = [get_comp(session, prop, headers, url) for prop in properties]
        results = await asyncio.gather(*tasks)
    
    # 3.6 Convert results to DataFrame
    df = pd.DataFrame(results)
    
    # 3.7 Save results
    filename = f"Comps_All_{formatted_time}.csv"
    
    # Save to Google Colab
    df.to_csv(filename, index=False)
    
    # Save to Google Drive
    drive_path = f'/content/drive/MyDrive/B - RMD Home Buyers/RMD Marketing/RMD Marketing Lists/2024/REAPI Comps/{filename}'
    df.to_csv(drive_path, index=False)
    
    # Download to user's machine
    files.download(filename)
    
    print(f"File '{filename}' has been saved in Colab, Google Drive, and downloaded to your machine.")
# 4. Main Function
def main():
    # 4.1 Input file specification
    input_file = "property_list.txt"  # Update this with your input file name
    # 4.2 Data import
    properties = import_data(input_file)
    # 4.3 Comps retrieval
    asyncio.run(get_comps(properties))

# 5. Main Execution
if __name__ == "__main__":
    main()
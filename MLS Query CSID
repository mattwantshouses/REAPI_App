# Script Name:  MLS Query 1 - CSID 
# Version: 7.5 (add exclude functionality + last sale date)

import requests
import json
import logging
import csv
import pandas as pd
from typing import Dict, Any, List
from google.colab import userdata, files
from datetime import datetime, timedelta
import pytz
import io



# 1. Configuration and Setup
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_URL = "https://api.realestateapi.com/v2/PropertySearch"
API_KEY = userdata.get('x-api-key')

if not API_KEY:
    raise ValueError("API key not found in Colab secrets. Please set the 'x-api-key' secret.")

# 2. Helper Functions
# 2.1 API Request Function
def make_api_request(payload: Dict[str, Any]) -> Dict[str, Any]:
    """Make an API request and return the JSON response."""
    headers = {
        "accept": "application/json",
        "x-user-id": "UniqueUserIdentifier",
        "content-type": "application/json",
        "x-api-key": API_KEY
    }
    try:
        response = requests.post(API_URL, json=payload, headers=headers)
        response.raise_for_status()
        json_response = response.json()
        if 'error' in json_response or 'errors' in json_response:
            handle_api_error(json_response)
        return json_response
    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        if hasattr(e, 'response') and e.response is not None:
            logger.error(f"Response content: {e.response.text}")
        raise

# 2.2 Query Parameter Extraction
def extract_query_params(payload: Dict[str, Any]) -> Dict[str, List[str]]:
    """Extract cities and counties from the payload."""
    cities = []
    counties = []
    for condition in payload.get('and', []):
        if 'or' in condition:
            for or_condition in condition['or']:
                if 'city' in or_condition:
                    cities.append(or_condition['city'])
                elif 'county' in or_condition:
                    counties.append(or_condition['county'])
    return {'cities': cities, 'counties': counties}

# 2.3 API Response Printing
def print_api_response(response: Dict[str, Any]):
    """Print the API response, highlighting any errors."""
    print("API Response:")
    if 'error' in response:
        print("API Error:")
        print(json.dumps(response['error'], indent=2))
    elif 'errors' in response:
        print("API Errors:")
        print(json.dumps(response['errors'], indent=2))
    else:
        print("Response Details:")
        print(json.dumps({k: v for k, v in response.items() if k != 'data'}, indent=2))

# 2.4 Summary Formatting
def format_summary(summary: Dict[str, Any]) -> str:
    """Format the summary data for printing."""
    return json.dumps(summary, indent=2)

# 2.5 JSON to CSV Conversion
def json_to_csv(main_response: Dict[str, Any], city_county_summaries: List[Dict[str, Any]]) -> pd.DataFrame:
    """Convert JSON data to a readable DataFrame format."""
    if not main_response or not city_county_summaries:
        logger.warning("No data to convert to CSV.")
        return pd.DataFrame()

    # 2.5.1 Initialize list to store rows
    rows = []

    # 2.5.2 Prepare column names
    columns = ['Field'] + [summary.get('location', 'Unknown') for summary in city_county_summaries] + ['Total']

    # 2.5.3 Populate the rows
    for key in main_response.get('summary', {}):
        row = [key]  # Start with the 'Field'
        for summary in city_county_summaries:
            row.append(summary.get('summary', {}).get(key, ''))
        row.append(main_response['summary'][key])  # Add the 'Total'
        rows.append(row)

    # 2.5.4 Create DataFrame
    df = pd.DataFrame(rows, columns=columns)

    return df

# 2.6 API Error Handling
def handle_api_error(response: Dict[str, Any]):
    if 'error' in response:
        print("API Error:")
        print(json.dumps(response['error'], indent=2))
    elif 'errors' in response:
        print("API Errors:")
        print(json.dumps(response['errors'], indent=2))

# 2.7 Establish 11 months ago (change this by updating the timedelta)
eleven_months_ago = (datetime.now() - timedelta(days=11*30)).strftime('%Y-%m-%d')

# 3. Main Execution
def main():
    # 3.1 Define base payload
    base_payload = {
        "count": True,  # 1. First get a count without spending credits
        "state": "FL",
        "mls_active": True,
        "mls_pending": False,
        "mls_days_on_market_min": 90,
        "corporate_owned": False,
        "reo": False,
        "and": [
            {
                "or": [
                    {"county": "Duval"},
                    # {"county": "St. Johns"},
                    # {"county": "Clay"},
                    # {"county": "Baker"},
                    # {"county": "Nassau"}
                ]
            },
            {
                "or": [
                    {"property_type": "SFR"},
                    # {"property_type": "CONDO"},
                    # {"property_type": "MFR"},
                    # {"property_type": "MOBILE"},
                    # {"property_type": "LAND"}
                ]
            }
        ],
        "exclude": [
            {"zip": "32209"},
            {"zip": "32208"},
            {"zip": "32254"},
            {"zip": "32656"}
        ]
    }
    # 3.2 Extract query parameters
    query_params = extract_query_params(base_payload)

    # 3.3 Hardcoded count query
    count_payload = base_payload.copy()
    count_payload["count"] = True
    count_response = make_api_request(count_payload)
    print("\n3.3 Count Query Response:")
    print_api_response(count_response)

    # 3.4 Hardcoded summary query
    summary_payload = base_payload.copy()
    summary_payload["summary"] = True
    summary_response = make_api_request(summary_payload)
    print("\n3.4 Summary Query Response:")
    print_api_response(summary_response)

    # 3.5 Extract and print summaries for each city and county
    print("\n3.5 City and County Summaries:")
    city_county_summaries = []
    for city in query_params['cities']:
        city_payload = base_payload.copy()
        city_payload["and"] = [cond for cond in city_payload["and"] if "city" not in str(cond)]
        city_payload["and"].append({"city": city})
        city_payload["summary"] = True
        city_response = make_api_request(city_payload)
        print(f"\n3.5.1 Summary for {city}:")
        print(format_summary(city_response.get('summary', {})))
        city_county_summaries.append({'location': city, 'summary': city_response.get('summary', {})})

    for county in query_params['counties']:
        county_payload = base_payload.copy()
        county_payload["and"] = [cond for cond in county_payload["and"] if "county" not in str(cond)]
        county_payload["and"].append({"county": county})
        county_payload["summary"] = True
        county_response = make_api_request(county_payload)
        print(f"\n3.5.2 Summary for {county} County:")
        print(format_summary(county_response.get('summary', {})))
        city_county_summaries.append({'location': f"{county} County", 'summary': county_response.get('summary', {})})

    # 3.6 Summary query (includes both count and summary)
    summary_payload = base_payload.copy()
    summary_payload["count"] = True
    summary_payload["summary"] = True
    summary_response = make_api_request(summary_payload)
    print("\n3.6 Summary Query Response:")
    print_api_response(summary_response)

    # 3.7 IDs only query
    ids_payload = base_payload.copy()
    ids_payload["ids_only"] = True
    ids_response = make_api_request(ids_payload)
    print("\n3.7 IDs Only Query Response:")
    print_api_response(ids_response)

    # 3.8 Generate timestamp and filename components
    est_tz = pytz.timezone('US/Eastern')
    current_datetime = datetime.now(est_tz)
    date_str = current_datetime.strftime("%m%d%y")
    time_str = current_datetime.strftime("%H%M")

    cities_str = "_".join(query_params['cities'][:2])  # Use first two cities to keep filename short
    if len(query_params['cities']) > 2:
        cities_str += "_etc"

    # 3.9 Generate CSV filename
    csv_filename = f"SummaryCount_{date_str}{time_str}_pre-foreclosures_{cities_str}.csv"

    # 3.10 Create DataFrame in the new format
    df = json_to_csv(summary_response, city_county_summaries)

    # 3.11 Save DataFrame to CSV in Colab environment
    df.to_csv(csv_filename, index=False)
    print(f"CSV file saved in Colab: {csv_filename}")

    # 3.12 Display CSV content preview
    print("\nCSV Content Preview:")
    print(df.head().to_string())

    # 3.13 Download the CSV file
    try:
        files.download(csv_filename)
        print(f"\nDownload initiated for {csv_filename}.")
        print("Your browser should prompt you to save the file or it may be automatically saved to your default downloads folder.")
        print("If you don't see a prompt, check your browser's download manager or your default downloads folder.")
    except Exception as e:
        print(f"\nAn error occurred while trying to download the file: {str(e)}")
        print("You can manually download the file from the Colab file browser on the left sidebar.")

    # 3.14 Save the full summary response to a JSON file with timestamp
    summary_json_filename = f"api_summary_response_{date_str}{time_str}.json"
    with open(summary_json_filename, 'w') as f:
        json.dump(summary_response, f, indent=2)
    logger.info(f"Full summary API response saved to {summary_json_filename}")

    # 3.15 Save property IDs to a separate JSON file
    ids_json_filename = f"ids_only_{date_str}{time_str}.json"
    property_ids = ids_response.get('data', [])
    with open(ids_json_filename, 'w') as f:
        json.dump(property_ids, f, indent=2)
    logger.info(f"Property IDs saved to {ids_json_filename}")

if __name__ == "__main__":
    main()
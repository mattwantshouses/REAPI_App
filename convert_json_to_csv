# Convert JSON or TXT to CSV
# Version 1.9

# 1. Import statements
import os
import json
import csv
import logging
from google.colab import files
from google.colab import drive
import glob
import pandas as pd

# 2. Mount Google Drive
drive.mount('/content/drive')

# 3. Setup logging
# 3.1. Set log filename
log_filename = 'conversion_log.log'
# 3.2. Configure logging
logging.basicConfig(filename=log_filename, level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')

# 4. Define helper functions
# 4.1. Flatten nested structures
def flatten_dict(d, parent_key='', sep='.'):
    items = []
    for k, v in d.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        elif isinstance(v, list):
            for i, item in enumerate(v):
                if isinstance(item, dict):
                    items.extend(flatten_dict(item, f"{new_key}{sep}{i}", sep=sep).items())
                else:
                    items.append((f"{new_key}{sep}{i}", item))
        else:
            items.append((new_key, v))
    return dict(items)

# 4.2. Define conversion function
def convert_to_csv(input_path, output_path):
    try:
        logging.info(f"Processing file: {input_path}")
        with open(input_path, 'r') as file:
            if input_path.endswith('.json'):
                data = json.load(file)
            else:
                data = json.loads(file.read())

        if isinstance(data, dict):
            df = pd.DataFrame([flatten_dict(data)])
        elif isinstance(data, list):
            df = pd.DataFrame([flatten_dict(item) for item in data])
        else:
            raise ValueError("Unsupported data structure")

        df.to_csv(output_path, index=False)
        logging.info(f"CSV file has been written to {output_path}")
        print(f"Conversion successful: {output_path}")
    except Exception as e:
        logging.error(f"Error converting {input_path} to CSV: {str(e)}")
        print(f"Error converting {input_path} to CSV: {str(e)}")

# 5. File handling and conversion
# 5.1. Check for input files
input_files = glob.glob('*.txt') + glob.glob('*.json')

# 5.2. Process files if found
if input_files:
    print("Found files to convert:")
    for i, file in enumerate(input_files, 1):
        print(f"{i}. {file}")

    # 5.3. User file selection
    while True:
        try:
            selection = int(input("Enter the number of the file you want to convert (or 0 to convert all): "))
            if 0 <= selection <= len(input_files):
                break
            else:
                print("Invalid selection. Please try again.")
        except ValueError:
            print("Please enter a valid number.")

    # 5.4. Set output paths
    drive_output_folder = '/content/drive/MyDrive/B - RMD Home Buyers/RMD Marketing/RMD Marketing Lists/2024/Pre-Foreclosure Project May 2024/PFC Project - 0.5 - Custom Lists'
    os.makedirs(drive_output_folder, exist_ok=True)

    # 5.5. Convert and save files
    files_to_convert = input_files if selection == 0 else [input_files[selection - 1]]
    
    for input_file in files_to_convert:
        input_path = input_file
        base_name = os.path.splitext(input_file)[0]
        colab_output_path = f"{base_name}_converted.csv"
        drive_output_path = os.path.join(drive_output_folder, f"{base_name}_converted.csv")

        convert_to_csv(input_path, colab_output_path)
        convert_to_csv(input_path, drive_output_path)

        # 5.6. Offer download
        print(f"\nTo download the converted CSV file:")
        print(f"Download {colab_output_path}")
        files.download(colab_output_path)

    print(f"\nConversion completed. Files saved in Colab environment and Google Drive folder.")

# 6. Handle case when no files are found
else:
    print("No .txt or .json files found. Please upload your files and run the script again.")

# 7. Download log file
if os.path.exists(log_filename):
    files.download(log_filename)
# Convert JSON or TXT to CSV and Google Sheets
# Version 4.3

# 1. Import statements
import os
import json
import csv
import logging
import pandas as pd
import glob
from google.colab import files, drive, auth, userdata
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2 import service_account
from googleapiclient.discovery import build

# 2. Mount Google Drive
drive.mount('/content/drive')

DRIVE_FOLDER_ID = '1dq-zCFoHpl30_f7BRquB_q5wOJnQsxWL'

# 3. Setup logging
log_filename = 'conversion_log.log'
logging.basicConfig(filename=log_filename, level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


# 4. Define helper functions
# 4.1 Flatten dictionary
def flatten_dict(d, parent_key='', sep='.'):
    items = []
    for k, v in d.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        elif isinstance(v, list):
            for i, item in enumerate(v):
                if isinstance(item, dict):
                    items.extend(flatten_dict(item, f"{new_key}{sep}{i}", sep=sep).items())
                else:
                    items.append((f"{new_key}{sep}{i}", item))
        else:
            items.append((new_key, v))
    return dict(items)

# 4.2 Convert to CSV
def convert_to_csv(input_path, output_path):
    try:
        logger.info(f"Processing file: {input_path}")
        with open(input_path, 'r') as file:
            if input_path.endswith('.json'):
                data = json.load(file)
            else:
                data = json.loads(file.read())

        if isinstance(data, dict):
            df = pd.DataFrame([flatten_dict(data)])
        elif isinstance(data, list):
            df = pd.DataFrame([flatten_dict(item) for item in data])
        else:
            raise ValueError("Unsupported data structure")

        df.to_csv(output_path, index=False)
        logger.info(f"CSV file has been written to {output_path}")
        print(f"Conversion successful: {output_path}")
    except Exception as e:
        logger.error(f"Error converting {input_path} to CSV: {str(e)}")
        print(f"Error converting {input_path} to CSV: {str(e)}")

# 4.3 Authenticate and get service
def authenticate_and_get_service():
    try:
        # Get the service account key from Colab secrets
        service_account_key = json.loads(userdata.get('gcp_service_account_key'))

        # Create credentials using the service account key
        creds = service_account.Credentials.from_service_account_info(
            service_account_key,
            scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        )

        # Build the services
        sheets_service = build('sheets', 'v4', credentials=creds)
        drive_service = build('drive', 'v3', credentials=creds)

        logger.info("Successfully authenticated and created services using service account.")
        return sheets_service, drive_service
    except Exception as e:
        logger.error(f"Authentication failed: {str(e)}")
        raise

# 4.4 Create Google Sheet
def create_google_sheet(csv_file, sheet_name):
    try:
        service, drive_service = authenticate_and_get_service()

        spreadsheet = {
            'properties': {
                'title': sheet_name
            }
        }
        spreadsheet = service.spreadsheets().create(body=spreadsheet, fields='spreadsheetId').execute()
        spreadsheet_id = spreadsheet.get('spreadsheetId')

        df = pd.read_csv(csv_file)
        # Sanitize data: replace NaN with empty string and convert all to string
        df = df.fillna('').astype(str)
        values = [df.columns.tolist()] + df.values.tolist()

        body = {
            'values': values
        }
        service.spreadsheets().values().update(
            spreadsheetId=spreadsheet_id, range='Sheet1',
            valueInputOption='RAW', body=body).execute()

        print(f"Google Sheet created: https://docs.google.com/spreadsheets/d/{spreadsheet_id}")
        logger.info(f"Google Sheet created with ID: {spreadsheet_id}")
        return spreadsheet_id
    except Exception as e:
        logger.error(f"Error creating Google Sheet: {str(e)}")
        print(f"Error creating Google Sheet: {str(e)}")
        raise

# 4.5 Process file
def process_file(input_file, drive_output_folder):
    input_path = input_file
    base_name = os.path.splitext(input_file)[0]
    colab_output_path = f"{base_name}_converted.csv"
    drive_output_path = os.path.join(drive_output_folder, f"{base_name}_converted.csv")

    convert_to_csv(input_path, colab_output_path)
    convert_to_csv(input_path, drive_output_path)

    sheet_name = f"{base_name}_sheet"
    create_google_sheet(colab_output_path, sheet_name)

    print(f"\nTo download the converted CSV file:")
    print(f"Download {colab_output_path}")
    files.download(colab_output_path)

# 4.6 Create and upload file to Google Drive
def create_file_in_drive(drive_service, folder_id, file_name, file_content):
    try:
        file_metadata = {
            'name': file_name,
            'parents': [folder_id]
        }
        media = MediaFileUpload(file_content, resumable=True)
        file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
        logger.info(f"File created in Google Drive with ID: {file.get('id')}")
        print(f"File created in Google Drive: {file_name}")
        return file.get('id')
    except Exception as e:
        logger.error(f"Error creating file in Google Drive: {str(e)}")
        print(f"Error creating file in Google Drive: {str(e)}")
        raise    

# 5. Main execution
def main():
    try:
        # 5.1. Check for input files
        input_files = glob.glob('*.txt') + glob.glob('*.json')

        # 5.2. Process files if found
        if input_files:
            print("Found files to convert:")
            for i, file in enumerate(input_files, 1):
                print(f"{i}. {file}")

            # 5.3. User file selection
            while True:
                try:
                    selection = int(input("Enter the number of the file you want to convert (or 0 to convert all): "))
                    if 0 <= selection <= len(input_files):
                        break
                    else:
                        print("Invalid selection. Please try again.")
                except ValueError:
                    print("Please enter a valid number.")

            # 5.4. Set output paths
            drive_output_folder = '/content/drive/MyDrive/B - RMD Home Buyers/RMD Marketing/RMD Marketing Lists/2024/Pre-Foreclosure Project May 2024/PFC Project - 0.5 - Custom Lists'
            os.makedirs(drive_output_folder, exist_ok=True)

            # 5.5. Convert and save files
            files_to_convert = input_files if selection == 0 else [input_files[selection - 1]]

            for input_file in files_to_convert:
                process_file(input_file, drive_output_folder)

            # 5.6. Create a new file in the specified Google Drive folder
            _, drive_service = authenticate_and_get_service()
            new_file_name = "new_file.txt"
            new_file_content = "This is a new file created in the specified folder."
            
            with open(new_file_name, 'w') as f:
                f.write(new_file_content)
            
            create_file_in_drive(drive_service, DRIVE_FOLDER_ID, new_file_name, new_file_name)

            print(f"\nConversion completed. Files saved in Colab environment, Google Drive folder, and as Google Sheets.")
            print(f"A new file '{new_file_name}' has been created in the specified Google Drive folder.")

        # 6. Handle case when no files are found
        else:
            print("No .txt or .json files found. Please upload your files and run the script again.")

        # 7. Download log file
        if os.path.exists(log_filename):
            files.download(log_filename)

    except Exception as e:
        logger.error(f"An error occurred in main execution: {str(e)}")
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()